# Copyright (C) 2017 Liu, Yuanyuan (liuyuanyuan@highgo.com)
# data source provider #
datasource.postgresql.description = PostgreSQL JDBC 连接器

driver.cockroach.description  = CockroachDB JDBC 驱动程序
driver.edb.description        = EDB 标准驱动程序
driver.gcloudpg.description   = Google Cloud SQL PostgreSQL JDBC 驱动程序
driver.postgresql.description = PostgreSQL 标准驱动
driver.materialize.description = Materialize JDBC 驱动程序
driver.timescale.description  = Timescale JDBC 驱动程序
driver.yugabytedb.description = YugabyteDB JDBC 驱动程序
driver.cratedb.description = CrateDB JDBC 驱动程序

handler.ssl.description = 安全套接层
# network handler #
handler.ssl.name        = SSL

meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canBackward.description                   = 访问方法支持向后扫描吗?
# meta #
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canBackward.name                          = 可向后扫描
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canMultiCol.description                   = 访问方法支持多字段索引吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canMultiCol.name                          = 可多字段
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canOrder.description                      = 访问方法支持由索引列的值分类的有序扫描吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canOrder.name                             = 可排序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canOrderByOp.description                  = 访问方法支持由索引字段上的操作符的结果分类的排序扫描吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canOrderByOp.name                         = 可通过操作符排序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canUnique.description                     = 访问方法支持唯一索引吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.canUnique.name                            = 可唯一
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.clusterable.description                   = 这种类型的索引可以集群吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.clusterable.name                          = 可集群
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.handler.description                       = 负责提供访问方法信息的处理函数的OID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.handler.name                              = 处理程序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.name.description                          = 访问方法的名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.name.name                                 = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.objectId.description                      = 行标识符
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.objectId.name                             = 对象 Id
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.operatorStrategies.description            = 访问方法的操作符策略数量。或者如果访问方法没有一组固定的操作符策略则为零。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.operatorStrategies.name                   = 策略
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.optionalKey.description                   = 访问方法支持对第一个索引字段没有任何约束的扫描吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.optionalKey.name                          = 可选键
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.predLocks.description                     = 这种类型的索引管理细粒度的谓词锁定吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.predLocks.name                            = Pred 锁定
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.searchArray.description                   = 访问方法支持 ScalarArrayOpExpr 搜索吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.searchArray.name                          = 搜索数组
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.searchNulls.description                   = 访问方法支持 IS NULL/NOT NULL 搜索吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.searchNulls.name                          = 搜索空值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.storage.description                       = 索引存储数据类型可以与列数据类型不同吗?
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.storage.name                              = 存储
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.supportRoutines.description               = 该访问方法的支持例程数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.supportRoutines.name                      = 支持例程
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.type.description                          = 目前总是用 i 表示索引访问方法； 将来可能允许其他值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAccessMethod.type.name                                 = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.description.description                      = 聚合函数注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.description.name                             = 注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.function.description                         = 函数定义
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.function.name                                = 函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.inputTypes.description                       = 输入数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.inputTypes.name                              = 输入
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.name.description                             = 聚合函数名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.name.name                                    = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.objectId.description                         = 函数对象ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.objectId.name                                = 对象ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.outputType.description                       = 输出数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAggregate.outputType.name                              = 数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.collation.description                        = 列的定义排序规则，如果列不是可排序数据类型，则为零。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.collation.name                               = 排序规则
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.defaultValue.description                     = 默认值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.defaultValue.name                            = 默认值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.description.description                      = 列上的注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.description.name                             = 注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.fullTypeName.description                     = 列数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.fullTypeName.name                            = 数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.generatedValue.description                   = 生成的值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.generatedValue.name                          = 生成的值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.identity.description                         = 属性标识（始终或默认）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.identity.name                                = 标识
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.intervalTypeField.description                = 间隔类型字段。 如果同时指定了字段和比例，\r\n字段必须包含 SECOND，因为比例仅适用于秒。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.intervalTypeField.name                       = 间隔类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.local.description                            = 此列在关系中本地定义。 请注意，列可以同时在本地定义和继承。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.local.name                                   = 本地
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.maxLength.description                        = 如果数据类型指定了文本或位串的类型，则该字段指定其声明的最大长度； 所有其他数据类型为 NULL，或者如果未声明最大长度。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.maxLength.name                               = 长度
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.objectId.description                         = 属性唯一对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.objectId.name                                = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.precision.description                        = 如果数据类型包含数字类型，则此列包含目标列的类型的准确性（声明的或隐含的）。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.precision.name                               = 精度
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.required.description                         = 非空
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.required.name                                = 非空
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.scale.description                            = 比例决定小数点右侧的有效位数。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAttribute.scale.name                                   = 比例
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.description.description             = 注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.description.name                    = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.installedVersion.description        = 已安装版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.installedVersion.name               = 已安装
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.name.description                    = 扩展名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.name.name                           = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.version.description                 = 扩展版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreAvailableExtension.version.name                        = 版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCharset.name.name                                      = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.collate.description                          = 此排序规则对象的 LC_COLLATE
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.collate.name                                 = 校对
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.ctype.description                            = 此排序规则对象的 LC_CTYPE
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.encodingId.description                       = 排序规则适用的编码，如果适用于任何编码，则为 -1
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.encodingId.name                              = 编码
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.name.description                             = 排序规则名称（每个命名空间和编码唯一）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.name.name                                    = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.objectId.name                                = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.ownerId.name                                 = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.provider.name                                = 提供者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.schema.description                           = 包含此排序规则的命名空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreCollation.schema.name                                  = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.align.name                                    = 对齐
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.analyzeFunc.name                              = 分析函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.arrayDelimiter.name                           = 数组分隔符
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.arrayDim.name                                 = 数组维数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.arrayItemType.name                            = 数组项类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.baseType.name                                 = 基础类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.byValue.name                                  = 按值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.collationId.name                              = 排序规则 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.constraint.description                        = 约束（对于域类型）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.constraint.name                               = 约束
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.defaultValue.name                             = 默认值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.description.name                              = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.elementType.name                              = 元素类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.enumValues.description                        = 可能的枚举值列表
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.enumValues.name                               = 枚举值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.inputFunc.name                                = 输入函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.modInFunc.name                                = Mod 入函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.modOutFunc.name                               = Mod 出函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.notNull.name                                  = 非空
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.outputFunc.name                               = 输出函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.owner.name                                    = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.preferred.name                                = 首选的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.receiveFunc.name                              = 接收函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.sendFunc.name                                 = 发送函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.storage.name                                  = 存储
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.typeCategory.name                             = 类型种类
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.typeMod.name                                  = 类型修饰符
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDataType.typeType.name                                 = 类型分类
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.allowConnect.name                             = 允许连接
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.collate.name                                  = 排序规则
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.connectionLimit.name                          = 连接限制
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.ctype.name                                    = 排序规则类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.dBA.name                                      = DBA
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.defaultEncoding.name                          = 默认编码
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.defaultTablespace.name                        = 默认表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.description.description                       = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.description.name                              = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.name.name                                     = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDatabase.template.name                                 = 模板
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.name.name                                   = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.objectId.name                               = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.objectType.name                             = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.schemaName.name                             = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.tableName.name                              = 表
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreDependency.targetObject.name                           = 对象
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreEventTrigger.enabledState.description                  = 控制事件触发器触发的 session_replication_role 模式。\r\nO = 触发器在“原点”和“本地”模式下触发，D = 触发器被禁用，R = 触发器在“副本”模式下触发，A = 触发器始终触发。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreEventTrigger.enabledState.name                         = 启用状态
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreEventTrigger.eventType.name                            = 事件类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreEventTrigger.function.name                             = 函数/过程
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreEventTrigger.objectId.name                             = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.conditions.description                       = 扩展条件
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.conditions.name                              = 条件
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.name.description                             = 扩展名
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.name.name                                    = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.relocatable.description                      = 可以重定位
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.relocatable.name                             = 可重定位
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.schema.description                           = 已安装的模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.schema.name                                  = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.tables.description                           = 使用表格
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.tables.name                                  = 表格
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.version.description                          = 已安装的版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreExtension.version.name                                 = 版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignDataWrapper.handler.name                        = 处理器
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignDataWrapper.name.name                           = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignDataWrapper.options.name                        = 选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignDataWrapper.owner.name                          = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignDataWrapper.validator.name                      = 验证器
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.foreignDataWrapper.name                  = 外部数据封装器
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.name.name                                = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.options.name                             = 选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.owner.name                               = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.type.name                                = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreForeignServer.version.name                             = 版本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreGenericTrigger.manipulation.name                       = 操纵
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreGenericTrigger.objectDefinitionText.name               = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreGenericTrigger.orientation.name                        = 指向
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreGenericTrigger.timing.name                             = 时序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.accessMethod.description                         = 访问方法
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.accessMethod.name                                = 访问方法
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.checkXMin.name                                   = 检查 X 最小
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.clustered.name                                   = 聚合的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.description.name                                 = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.exclusion.description                            = 如果为 true，则此索引支持约束排除
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.exclusion.name                                   = 排它
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.immediate.description                            = 如果为true，则在添加数据时直接进行唯一性检查（如果unique不为true，则不适用）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.immediate.name                                   = 立即的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.indexNumScans.description                        = 参数为表时完成的顺序扫描次数，或参数为索引时完成的索引扫描次数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.indexNumScans.name                               = 扫描次数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.indexRelSize.description                         = 索引使用的磁盘空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.indexRelSize.name                                = 相对大小
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.objectDefinitionText.description                 = 索引定义
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.predicateExpression.description                  = 部分索引断言的表达式树。 如果不是部分索引，则为空。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.predicateExpression.name                         = 断言
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.primary.description                              = 该索引代表表的主键（本例中唯一字段也必须为真）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.primary.name                                     = 主要的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.ready.description                                = 如果为 true，则索引已准备好添加数据。 值为 false 表示对于 INSERTS/UPDATES 忽略索引。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.ready.name                                       = 就绪的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.tablespace.description                           = 索引表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.tablespace.name                                  = 表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.unique.description                               = 唯一索引
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.unique.name                                      = 唯一的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.valid.description                                = 如果为 true，则可以在查询中使用索引。 False 表示索引可能不完整：但是，它会被 INSERT/UPDATE 命令更改，但在不可能的查询中使用它是安全的。 如果它是唯一的，则也不能保证唯一性。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndex.valid.name                                       = 有效的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.ascending.name                             = 升序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.name.name                                  = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.nullable.name                              = 可为空的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.operatorClass.name                         = 操作符类
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.ordinalPosition.name                       = 顺序位置
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.tableColumn.description                    = 表字段
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreIndexColumn.tableColumn.name                           = 表字段
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJob.description.name                                   = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJob.enabled.name                                       = 已启用
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJob.hostAgent.name                                     = 主机代理
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJob.jobClass.name                                      = 类别
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJob.name.name                                          = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobClass.name.name                                     = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobSchedule.description.name                           = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobSchedule.enabled.name                               = 已启用
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobSchedule.end.name                                   = 结束
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobSchedule.name.name                                  = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobSchedule.start.name                                 = 开始
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.description.name                               = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.enabled.name                                   = 已启用
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.kind.name                                      = 种类
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.name.name                                      = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.objectDefinitionText.name                      = 代码
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.onError.name                                   = 出错时
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.remoteConnectionString.name                    = 远程连接
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreJobStep.targetDatabase.name                            = 目标数据库
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.handlerId.name                                = 处理程序 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.inlineHandlerId.name                          = 内联处理程序 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.name.name                                     = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.objectId.name                                 = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.ownerId.name                                  = 所有者 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.trusted.name                                  = 受信任的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.userDefined.name                              = 用户定义的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreLanguage.validatorId.name                              = 验证器 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreMaterializedView.tablespace.description                = 物化视图表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreMaterializedView.tablespace.name                       = 表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreMaterializedView.withData.description                  = 使用 [否] 数据
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreMaterializedView.withData.name                         = 已填充
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.default.name                             = 默认的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.family.name                              = 族
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.keyType.name                             = 键类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.namespace.name                           = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.objectId.name                            = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.owner.name                               = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorClass.type.name                                = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorFamily.namespace.name                          = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorFamily.objectId.name                           = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreOperatorFamily.owner.name                              = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.aggregate.name                               = 聚合
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.body.name                                    = 体
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.estRows.name                                 = 估计行
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.execCost.name                                = 执行成本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.kind.name                                    = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.language.name                                = 语言
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.leakproof.description                        = 该功能没有副作用。 除了通过返回值之外，没有提供有关其参数的信息。 根据参数值，任何可能产生错误的函数都不是防漏的。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.leakproof.name                               = 防漏的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.objectDefinitionText.name                    = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.objectId.name                                = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.owner.description                            = 函数的所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.owner.name                                   = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.procTransform.name                           = 存储过程转换性
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.procVolatile.description                     = volatile 属性表明函数的结果是仅取决于其输入参数还是受外部因素的影响。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.procVolatile.name                            = 存储过程易变性
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.returnType.name                              = 返回类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.returnsSet.description                       = 函数返回一个集合（即指定数据类型的一组值）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.returnsSet.name                              = 返回集
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.securityDefiner.name                         = 安全定义者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.strict.description                           = 如果任何参数为 NULL，则该函数返回 NULL。 在这种情况下，该函数实际上根本不会被调用。 非“严格”的函数必须准备好接受 NULL 值。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.strict.name                                  = 严格的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.varArrayType.name                            = 变量数组类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedure.window.name                                  = 窗口
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.defaultValue.description            = 参数默认值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.defaultValue.name                   = 默认值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.name.name                           = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.ordinalPosition.name                = 顺序位置
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.parameterKind.name                  = 参数种类
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreProcedureParameter.parameterType.name                  = 参数类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.bypassRls.name                                    = 绕过 RLS
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.canLogin.name                                     = 可登录
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.connLimit.name                                    = 连接限制
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.createDatabase.name                               = 创建数据库
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.createRole.name                                   = 创建角色
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.inherit.name                                      = 继承
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.name.name                                         = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.objectDefinitionText.name                         = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.objectId.name                                     = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.password.name                                     = 密码
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.replication.name                                  = 复制
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.superUser.name                                    = 超级用户
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRole.validUntil.name                                   = 有效期至
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRoleMember.adminOption.name                            = 管理选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRoleMember.grantor.name                                = 授予者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRoleMember.member.name                                 = 角色
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRoleMember.owner.name                                  = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.enabled.description                               = 控制规则触发的 session_replication_role 模式。 O = 在“原始”和“本地”模式下触发规则，D = 禁用规则，R = 在“副本”模式下触发规则，A = 始终触发规则。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.enabled.name                                      = 已启用
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.instead.description                               = 如果规则是 INSTEAD 规则，则为真
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.instead.name                                      = 代替
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.name.description                                  = 规则名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.name.name                                         = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.objectDefinitionText.name                         = 定义
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.objectId.name                                     = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.type.description                                  = 规则适用的事件类型：1 = SELECT、2 = UPDATE、3 = INSERT、4 = DELETE
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreRule.type.name                                         = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.dataTypes.name                                  = 数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.database.name                                   = 数据库
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.description.description                         = 模式注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.description.name                                = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.name.name                                       = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.objectId.name                                   = 命名空间 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSchema.owner.name                                      = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.cacheValue.description         = 该序列的缓存
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.cacheValue.name                = 缓存
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.cycled.description             = 该序列是否循环
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.cycled.name                    = 循环的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.incrementBy.description        = 该序列的步长
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.incrementBy.name               = 步长
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.lastValue.description          = 该序列的最后值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.lastValue.name                 = 最后值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.maxValue.description           = 该序列的最大值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.maxValue.name                  = 最大值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.minValue.description           = 该序列的最小值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.minValue.name                  = 最小值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.startValue.description         = 序列的起始值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSequence$AdditionalInfo.startValue.name                = 起始值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSetting.name.name                                      = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSetting.unit.name                                      = 单位
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreSetting.value.name                                     = 值
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.hasOids.name                                     = 有 OID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.partitionKey.description                         = 分区表依据
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.partitionKey.name                                = 分区依据
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.partitions.name                                  = 分区
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.subTables.name                                   = 子表
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.superTables.name                                 = 超级表
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTable.tablespace.name                                  = 表空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.description.name                             = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.objectId.name                                = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.owner.description                            = 表所有者 (创建者)
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.owner.name                                   = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.relOptions.description                       = 访问方法特定的选项，如“keyword=value”字符串
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableBase.relOptions.name                              = 额外选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraint.source.description                     = 检查约束的表达式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraint.source.name                            = 表达式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.deferrable.description             = 约束可以延期吗？
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.deferrable.name                    = 可延期的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.deferred.description               = 约束是默认延迟的吗？
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.deferred.name                      = 可延期的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.description.description            = 约束注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.description.name                   = 注释
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.objectDefinitionText.description   = 约束定义文本
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintBase.objectId.name                      = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintColumn.attribute.name                   = 属性
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableConstraintColumn.ordinalPosition.name             = 顺序位置
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeign.foreignOptions.name                       = 外部选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeign.foreignServer.name                        = 外部服务器
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.associatedEntity.name                  = 关联实体
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.deleteRule.description                 = 外键约束的删除规则：CASCADE、SET NULL、SET DEFAULT、RESTRICT 或 NO ACTION。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.deleteRule.name                        = 删除规则
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.matchType.description                  = MATCH FULL 不允许多列外键的一列为空，除非所有外键列都为空。\r\nMATCH SIMPLE 允许某些外键列为空，而外键的其他部分不为空。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.matchType.name                         = 匹配类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.referencedConstraint.description       = 引用约束
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.referencedConstraint.name              = 参照约束
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.updateRule.description                 = 外键约束的更改规则是 CASCADE、SET NULL、SET DEFAULT、RESTRICT 或 NO ACTION。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKey.updateRule.name                        = 更新规则
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableForeignKeyColumn.referencedColumn.name            = 参照字段
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableInheritance.associatedEntity.description          = 关联实体
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableInheritance.associatedEntity.name                 = 关联实体
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableInheritance.sequenceNum.name                      = 序列数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablePartition.partitionExpression.name                = 分区表达式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.diskSpace.description                        = 指定表使用的总磁盘空间，包括所有索引和 TOAST 数据
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.diskSpace.name                               = 磁盘空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.relationSize.description                     = 分叉“main”使用的磁盘空间
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.relationSize.name                            = 相对大小
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.rowCount.name                                = 行数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTableReal.rowCountEstimate.name                        = 行数估计
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablespace.loc.description                             = 位置名
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablespace.loc.name                                    = 位置
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablespace.name.name                                   = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablespace.options.name                                = 选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTablespace.owner.name                                  = 所有者
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.actionTiming.name                              = 时序
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.columnRefs.description                         = 表列名称，如果触发器是特定于列的
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.columnRefs.name                                = 列
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.description.name                               = 描述
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.enabledState.description                       = 控制触发器触发的 session_replication_role 模式。\r\nO = 触发器在“原点”和“本地”模式下触发，D = 触发器被禁用，R = 触发器在“副本”模式下触发，A = 触发器始终触发。
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.enabledState.name                              = 已启用
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.function.description                           = 要调用的函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.function.name                                  = 函数
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.manipulationTypes.name                         = 操控
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.name.name                                      = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.objectDefinitionText.name                      = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.objectId.name                                  = 对象 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.table.name                                     = 表
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.type.description                               = 触发器类型（ROW 或 STATEMENT）
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.type.name                                      = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.whenExpression.description                     = 触发器的 WHEN 条件的表达式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTrigger.whenExpression.name                            = When 表达式
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreTriggerBase.name.name                                  = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreUserMapping.foreignServer.name                         = 外部服务器
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreUserMapping.name.name                                  = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreUserMapping.serverOptions.name                         = 服务器选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreUserMapping.userMappingOptions.name                    = 用户映射选项
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreView.name.name                                         = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreView.objectDefinitionText.name                         = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreViewBase.name.name                                     = 名称
meta.org.jkiss.dbeaver.ext.postgresql.model.PostgreViewBase.objectDefinitionText.name                     = 源
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalSchema.externalOptions.name    = 外部选项
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.compressed.name          = 压缩
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.inputFormat.name         = 输入格式
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.location.name            = 位置
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.outputFormat.name        = 输出格式
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.parameters.name          = 参数
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.serdeParameters.name     = 伺服参数
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftExternalTable.serializationLib.name    = 序列化
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.columnEncoding.description = 列的编码。 将行添加到表中时应用于数据值列的压缩类型。
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.columnEncoding.name        = 编码
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.distKey.description        = 如果此列是表的分布键，则为真。
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.distKey.name               = 距离键
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.fullTypeName.name          = 数据类型
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.sortKey.description        = 排序键中列的顺序。\r\n如果表使用复合排序键，则作为排序键一部分的所有列都有一个正值，表示该列在排序键中的位置。\r\n如果表使用交错排序键，则作为排序键一部分的所有每一列都有一个交替为正或负的值，其中绝对值指示列在排序键中的位置。\r\n如果为 0，则该列不是排序键的一部分。
meta.org.jkiss.dbeaver.ext.postgresql.model.impls.redshift.RedshiftTableColumn.sortKey.name               = 排序键
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.hold_pid.name                                = 持有 PID
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.hold_user.name                               = 持有用户
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.statement_in.name                            = 持有语句
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.wait_pid.name                                = 等待 PID
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.wait_statement.name                          = 等待语句
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLock.wait_user.name                               = 等待用户
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.datname.name                             = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.detail.description                       = 页 / 元组
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.detail.name                              = 页/元组
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.granted.description                      = 已授予
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.locktype.name                            = 类型
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.mode.name                                = 模式
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.pid.name                                 = PID
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.relation.description                     = 关系
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.relation.name                            = 关系
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.tid.description                          = 事务 ID
meta.org.jkiss.dbeaver.ext.postgresql.model.lock.PostgreLockItem.tid.name                                 = TID
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.actualRows.name                      = 行
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.cost.name                            = 成本
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.entity.description                   = 实体
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.entity.name                          = 实体
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.nodeCondition.name                   = 条件
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.nodeType.description                 = 节点类型
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.nodeType.name                        = 节点类型
meta.org.jkiss.dbeaver.ext.postgresql.model.plan.PostgrePlanNodeBase.totalTime.name                       = 时间
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.appName.name                           = 应用名称
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.backendStart.name                      = 后台启动
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.briefQuery.name                        = 短查询
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.clientHost.name                        = 客户端主机
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.clientPort.name                        = 客户端端口
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.db.name                                = 数据库
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.pid.name                               = PID
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.queryStart.name                        = 查询开始
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.state.name                             = 状态
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.stateChange.name                       = 状态变化
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.user.name                              = 用户
meta.org.jkiss.dbeaver.ext.postgresql.model.session.PostgreSession.xactStart.name                         = Xact 启动
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.analyzed.description            = 更新计划器使用的统计来确定最有效的方式来执行一个查询。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.analyzed.name                   = 已分析
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.disableSkipping.description     = 通常, VACUUM 将会跳过基于可见性映射的页.\n所有元组已知被冻结的页面总是可以跳过, 并且那些所有元组对所有事务可见的页面可能被跳过除了执行强制清空的情况。\n此外,除了执行强制清空的时候,一些页面可以跳过是为了避免等待其他会话用完他们。\n该选型禁用所有的页面跳过行为, 并且仅在可见性映射的内容可疑时才会被使用, 这应该只有硬件或软件问题导致数据库损坏时发生。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.disableSkipping.name            = 禁用页面跳过
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.freeze.description              = 选择强制 "冻结" 元组. 指定 FREEZE 相当于执行 VACUUM 并且 vacuum_freeze_min_age 和 vacuum_freeze_table_age参数设置为零.\n强制冻结总是在表重写时被执行, 所以当FULL指定时该选项是多余的。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.freeze.name                     = 冻结
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.full.description                = 选择 "完全" 清理, 可以回收更多空间, 但需要更长的时间和专门锁表。\n这种方法也需要额外的磁盘空间, 因为它写表的一个新副本,不释放旧的复制,直到操作完成。\n通常这应该只用于当大量的空间需要从表中回收。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.full.name                       = 完整
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.indexCleaning.description       = 指定 VACUUM 应该尝试删除指向死元组的索引条目。\r\n  这通常是所需的行为，并且是默认行为，除非 Vacuum_index_cleanup 选项\r\n  已设置为假\r\n  表被吸尘。 必要时将此选项设置为 false 可能很有用\r\n  使真空尽可能快地运行，例如避免即将发生的事务 ID 环绕。\r\n  但是，如果不定期执行索引清理，性能可能会受到影响，因为随着表的修改，\r\n  索引将累积死元组，而表本身将\r\n  累积在索引清理完成之前无法删除的死线指针。\r\n  此选项对没有索引的表无效，如果使用 FULL 选项，则将被忽略。\r\n从 PostgreSQL 12 开始启用。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.indexCleaning.name              = 索引清理
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.skipLocked.description          = 指定 VACUUM 在开始处理关系时不应等待释放任何冲突的锁：\r\n  如果不等待就无法立即锁定关系，则跳过该关系。\r\n  请注意，即使使用此选项，在打开关系的索引时 VACUUM 仍可能会阻塞。\r\n  此外，当从分区、表继承子表和某些类型的外部表中获取样本行时，VACUUM ANALYZE 仍可能会阻塞。\r\n  此外，虽然 VACUUM 通常处理指定分区表的所有分区，\r\n  如果分区表上存在冲突锁，此选项将导致 VACUUM 跳过所有分区。\r\n从 PostgreSQL 12 开始启用。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.skipLocked.name                 = 跳过锁定
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.truncated.description           = 指定 VACUUM 应尝试截断表末尾的任何空页\r\n  并允许将截断页面的磁盘空间返回给操作系统。\r\n  这通常是所需的行为，并且是默认行为，除非 Vacuum_truncate 选项\r\n  已将表设置为 false 以进行清理。 将此选项设置为 false\r\n  可能有助于避免截断所需的表上的 ACCESS EXCLUSIVE 锁定。\r\n  如果使用 FULL 选项，则忽略此选项。\r\n从 PostgreSQL 12 开始启用。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolBaseVacuumSettings.truncated.name                  = 截断
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolMViewRefreshSettings.withData.description          = 如果指定了 WITH DATA（或默认值），则执行后备查询以提供新数据，并且物化视图处于可扫描状态。\r\n如果指定了 WITH NO DATA，则不会生成新数据，并且物化视图处于不可扫描状态。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolMViewRefreshSettings.withData.name                 = 包含数据
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.cascading.description        = 自动截断外键引用任何命名表的所有表,或任何由于级联添加到组的表。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.cascading.name               = 级联的
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.only.description             = 如果未指定 ONLY, 表及其后代表(如果有的话)会被截断。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.only.name                    = 唯一的
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.restarting.description       = 自动重新启动由截断表的列所有的序列。
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.restarting.name              = 重启标识
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.running.description          = 在单独的事务中运行工具。 工具执行前提交活动事务，工具执行成功后提交
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolTableTruncateSettings.running.name                 = 在单独的事务中运行
meta.org.jkiss.dbeaver.ext.postgresql.tasks.PostgreToolWithStatus$ToolStatus.message.name                 = 消息

org.jkiss.dbeaver.task.category.postgreTool.description = PostgreSQL 数据库工具
org.jkiss.dbeaver.task.category.postgreTool.name        = 工具
org.jkiss.dbeaver.task.category.postgresql.description  = PostgreSQL 数据库任务

pgDatabaseRestore.confirmationMessage = 您即将从 {1} 恢复数据库 {0}。

provider.data.type.postgresql.description = PostgreSQL 数据类型提供者
# data type provider #
provider.data.type.postgresql.name        = PostgreSQL 数据类型提供者

task.pgDatabaseBackup.description    = PostgreSQL 数据库转储任务
task.pgDatabaseBackup.name           = PostgreSQL 转储
task.pgDatabaseRestore.description   = PostgreSQL 数据库恢复任务
task.pgDatabaseRestore.name          = PostgreSQL 恢复
task.pgScriptExecute.description     = PostgreSQL 脚本执行
task.pgScriptExecute.name            = PostgreSQL 脚本
task.pgToolTriggerDisable.name       = 禁用触发器
task.pgToolTriggerEnable.name        = 启用触发器

# tool analyze #
tasks.analyze.database.node.name     = 分析数据库
tasks.analyze.table.node.description = 分析表
tasks.analyze.table.node.name        = 分析表
tasks.mview.refresh.node.description = 刷新物化视图
tasks.mview.refresh.node.name        = 刷新物化视图
tasks.truncate.node.description      = 截断表
# tool truncate #
tasks.truncate.node.name             = 截断表
# tool vacuum #
tasks.vacuum.database.node.name      = 清理数据库
tasks.vacuum.table.node.description  = 清理表
tasks.vacuum.table.node.name         = 清理表

tree.accessMethod.node.name          = 访问方法
tree.accessMethods.node.name         = 访问方法
tree.administer.node.name            = 管理员
tree.administer.node.tip             = 管理
tree.aggregate.node.name             = 聚合函数
tree.aggregates.node.name            = 聚合函数
tree.aggregates.node.tip             = 聚合函数
tree.attribute.node.name             = 属性
tree.attributes.node.name            = 属性
tree.avalextension.node.name         = 可用的扩展
tree.avalextensions.node.name        = 可用的扩展
tree.collation.node.name             = 排序规则
tree.collations.node.name            = 排序规则
tree.column.node.name                = 列
tree.columns.node.name               = 列
tree.columns.node.tip                = 表字段
tree.constraint.columns.node.name    = 约束字段
tree.constraint.node.name            = 约束
tree.constraints.node.name           = 约束
tree.constraints.node.tip            = 表唯一键
tree.database.node.name              = 数据库
tree.databases.node.name             = 数据库
tree.databases.node.tip              = 集群数据库
tree.dependencies.node.name          = 依赖关系
tree.dependencies.node.tip           = 表依赖
tree.dependency.node.name            = 依赖关系
tree.encoding.node.name              = 编码
tree.encodings.node.name             = 编码
tree.event.trigger.node.name         = 事件触发器
tree.event.triggers.node.name        = 事件触发器
tree.event.triggers.node.tip         = 事件触发器
tree.extension.node.name             = 扩展
tree.extensions.node.name            = 扩展
tree.extensions.node.tip             = 数据库扩展
tree.foreignDataWrapper.node.name    = 外部数据封装器
tree.foreignDataWrappers.node.name   = 外部数据封装器
tree.foreignServer.node.name         = 外部服务器
tree.foreignServers.node.name        = 外部服务器
tree.foreign_key.node.name           = 外键
tree.foreign_key.node.tip            = 表外键
tree.foreign_key_columns.node.name   = 外键字段
tree.foreign_keys.node.name          = 外键
tree.index.node.name                 = 索引
tree.index_columns.node.name         = 索引字段
tree.indexes.node.name               = 索引
tree.indexes.node.tip                = 索引
tree.information.node.name           = 系统信息
tree.information.node.tip            = 信息
tree.job.class.node.name             = 种类
tree.job.classes.node.name           = 种类
tree.job.node.name                   = 作业
tree.job.schedule.node.name          = 日程
tree.job.schedules.node.name         = 日程
tree.job.step.node.name              = 步骤
tree.job.steps.node.name             = 步骤
tree.jobs.node.description           = pgAgent 要执行的计划作业列表。
tree.jobs.node.name                  = 作业
tree.language.node.name              = 语言
tree.languages.node.name             = 语言
tree.locks.node.name                 = 锁
tree.locks.node.tip                  = 服务器锁管理器
tree.mview.node.name                 = 物化视图
tree.mviews.node.name                = 物化视图
tree.mviews.node.tip                 = 物化视图
tree.opClass.node.name               = 操作符类
tree.opClasses.node.name             = 操作符类
tree.opFamilies.node.name            = 操作符族
tree.opFamily.node.name              = 操作符族
tree.package.node.name               = 包
tree.packages.node.name              = 包
tree.partition.node.name             = 分区
tree.partition_columns.node.name     = 分区列
tree.partitions.node.name            = 分区
tree.partitions.node.tip             = 表分区
tree.procedure.node.name             = 存储过程
tree.procedure_columns.node.name     = 存储过程字段
tree.procedures.node.name            = 存储过程
tree.procedures.node.tip             = 函数和过程
tree.reference.node.name             = 参考
tree.reference_columns.node.name     = 参考列
tree.references.node.name            = 参考
tree.references.node.tip             = 表引用
tree.role.belong.node.name           = 角色
tree.role.belongs.node.name          = 角色
tree.role.belongs.node.tip           = 属于
tree.role.member.node.name           = 角色
tree.role.members.node.name          = 成员
tree.role.members.node.tip           = 成员
tree.role.node.name                  = 角色
tree.roles.node.name                 = 角色
tree.roles.node.tip                  = 角色和用户
tree.rule.node.name                  = 角色
tree.rules.node.name                 = 规则
tree.rules.node.tip                  = 表规则
tree.schema.node.name                = 模式
tree.schemas.node.name               = 模式
tree.sequence.node.name              = 序列
tree.sequences.node.name             = 序列
tree.sequences.node.tip              = 序列
tree.sessions.node.name              = 会话
tree.setting.node.name               = 设置
tree.settings.node.name              = 设置
tree.storage.node.name               = 存储
tree.storage.node.tip                = 存储管理
tree.table.node.name                 = 表
tree.tablechildren.node.name         = 子表
tree.tablechildren_columns.node.name = 子表列
tree.tables.node.name                = 表
tree.tables.node.tip                 = 表
tree.tablespace.node.name            = 表空间
tree.tablespaces.node.name           = 表空间
tree.trigger.node.name               = 触发器
tree.triggers.node.name              = 触发器
tree.triggers.node.tip               = 表触发器
tree.tview.node.name                 = 视图
tree.tviews.node.name                = 视图
tree.tviews.node.tip                 = 视图
tree.type.node.name                  = 数据类型
tree.types.node.name                 = 数据类型
tree.types.node.tip                  = 数据类型
tree.userMapping.node.name           = 用户映射
tree.userMappings.node.name          = 用户映射
